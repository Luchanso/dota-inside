{"version":3,"sources":["constants.js","components/HeroCard/index.jsx","api.js","components/utils.js","components/App/index.jsx","registerServiceWorker.js","index.js"],"names":["constants","API","HeroCard","classes","this","props","children","isLast","Typography","component","className","label","lastLabel","hero","Label","renderLabel","imgPath","img","name","localized_name","picks","pro_pick","win","pro_win","bans","pro_ban","winRate","toFixed","wilsonScore","Card","card","CardMedia","media","image","title","CardContent","type","Divider","React","withStyles","maxWidth","margin","height","marginTop","fetchHeroes","fetch","then","response","json","up","down","n","z","phat","Math","sqrt","byWilsonScore","a","b","getTop","heroes","count","filter","map","sort","slice","Wrapper","styled","div","VerticalSpaceGrid","Grid","SORT_TYPE","App","context","handleUpdate","setState","isLoading","handleChangeSort","event","sortType","target","value","state","timer","setInterval","clearInterval","topHeroes","CircularProgress","item","xs","id","container","spacing","justify","gutterBottom","InputLabel","Select","labelId","onChange","MenuItem","renderHeroList","Component","Boolean","window","location","hostname","match","require","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"oTAAMA,EAAY,CAChBC,IAAK,4BAGQA,EAAQD,EAARC,ICuCTC,E,4KACW,IACLC,EAAYC,KAAKC,MAAjBF,QAER,OAAO,gBAAGG,EAAH,EAAGA,SAAUC,EAAb,EAAaA,OAAb,OACL,cAACC,EAAA,EAAD,CAAYC,UAAU,IAAIC,WAAaH,GAAUJ,EAAQQ,OAAUR,EAAQS,UAA3E,SACGN,O,+BAKG,IAAD,EACmBF,KAAKC,MAAvBF,EADD,EACCA,QAASU,EADV,EACUA,KACXC,EAAQV,KAAKW,cAEbC,EAAO,UAAMf,GAAN,OAAYY,EAAKI,KACxBC,EAAOL,EAAKM,eACZC,EAAQP,EAAKQ,SACbC,EAAMT,EAAKU,QACXC,EAAOX,EAAKY,QACZC,GAAYJ,EAAMF,EAAS,KAAKO,QAAQ,GACxCC,GAAkC,IAAnBf,EAAKe,aAAmBD,QAAQ,GAErD,OACE,eAACE,EAAA,EAAD,CAAMnB,UAAWP,EAAQ2B,KAAzB,UACE,cAACC,EAAA,EAAD,CACErB,UAAWP,EAAQ6B,MACnBC,MAAOjB,EACPkB,MAAOhB,IAET,eAACiB,EAAA,EAAD,WACE,cAAC3B,EAAA,EAAD,CAAY4B,KAAK,WAAW3B,UAAU,KAAtC,SACGS,IAEH,eAACJ,EAAD,mCAA4B,4BAAIM,OAChC,cAACiB,EAAA,EAAD,IACA,eAACvB,EAAD,2BAAoB,8BAAIY,EAAJ,UACpB,cAACW,EAAA,EAAD,IACA,eAACvB,EAAD,uBAAgB,4BAAIU,OACpB,cAACa,EAAA,EAAD,IACA,eAACvB,EAAD,CAAOP,QAAM,EAAb,2BAA4B,8BAAIqB,EAAJ,yB,GAxCfU,aA+CRC,cA/DA,CACbT,KAAM,CACJU,SAAU,IACVC,OAAQ,QAEVT,MAAO,CACLU,OAAQ,KAEV/B,MAAO,CACL8B,OAAQ,UAEV7B,UAAW,CACT+B,UAAW,KAmDAJ,CAAmBrC,GCvFrB0C,EAAc,kBACzBC,MAAM,GAAD,OAAI5C,EAAJ,mBACF6C,MAAK,SAAAC,GAAQ,OAAIA,EAASC,W,QCCzBpB,EAAc,SAACqB,EAAYC,GAC/B,IAAKD,EAAI,OAAQC,EACjB,IAAMC,EAAIF,EAAKC,EACTE,EAAI,QACJC,EAAOJ,EAAKE,EAElB,OAAQE,EAAKD,EAAEA,GAAG,EAAED,GAAGC,EAAEE,KAAKC,MAAMF,GAAM,EAAEA,GAAMD,EAAEA,GAAG,EAAED,IAAIA,KAAK,EAAEC,EAAEA,EAAED,IAGpEK,EAAgB,SAACC,EAASC,GAAV,OAAsBA,EAAE9B,YAAc6B,EAAE7B,aAEjD+B,EAAS,SAACC,EAAqBC,GAK1C,OAJkBD,EAAOE,QAAO,SAAAjD,GAAI,OAAIA,EAAKU,SAAWV,EAAKQ,YAAU0C,KAAI,SAAAlD,GAAI,kCAC1EA,GAD0E,IACpEe,YAAaA,EAAYf,EAAKU,QAASV,EAAKQ,eAGtC2C,KAAKR,GAAeS,MAAM,EAAGJ,I,+OCThD,IAAMK,EAAUC,IAAOC,IAAV,KAQPC,EAAoBF,YAAOG,IAAPH,CAAH,KAMjBI,EAEc,EAFdA,EAGQ,EAHRA,EAIK,EAwGIC,E,kDAlGb,WAAYnE,EAAOoE,GAAU,IAAD,8BAC1B,cAAMpE,EAAOoE,IAkBfC,aAAe,WACb,EAAKC,SAAS,CACZC,WAAW,IAGbhC,IAAcE,MAAK,SAACc,GAClB,EAAKe,SAAS,CACZC,WAAW,EACXhB,eA3BsB,EAgC5BiB,iBAAmB,SAACC,GAClB,EAAKH,SAAS,CACZI,SAAUD,EAAME,OAAOC,SA/BzB,EAAKC,MAAQ,CACXN,WAAW,EACXhB,OAAQ,GACRmB,SAAU,GANc,E,gEAW1B3E,KAAKsE,eACLtE,KAAK+E,MAAQC,YAAYhF,KAAKsE,aAfd,O,6CAmBhBW,cAAcjF,KAAK+E,S,uCAsBH,IAAD,EACyB/E,KAAK8E,MAArCN,EADO,EACPA,UAAWhB,EADJ,EACIA,OAAQmB,EADZ,EACYA,SAErBO,EAAY3B,EAAOC,EAAQ,IAAII,MAAK,SAACP,EAAGC,GAC5C,OAAIqB,IAAaR,EACRb,EAAEjC,QAAUgC,EAAEhC,QAGnBsD,IAAaR,EACPb,EAAEnC,QAAUmC,EAAErC,SAAY,IAAOoC,EAAElC,QAAUkC,EAAEpC,SAAY,IAGjE0D,IAAaR,EACRb,EAAErC,SAAWoC,EAAEpC,SAGjBqC,EAAE9B,YAAc6B,EAAE7B,eAG3B,OAAIgD,EACK,cAACW,EAAA,EAAD,IAGFD,EAAUvB,KAAI,SAAAlD,GAAI,OACvB,cAACyD,EAAA,EAAD,CAAMkB,MAAI,EAACC,GAAI,EAAf,SACE,cAAC,EAAD,CAAU5E,KAAMA,KADKA,EAAK6E,S,+BAO9B,OACE,cAACxB,EAAD,UACE,eAACI,EAAA,EAAD,CAAMqB,WAAS,EAACC,QAAS,GAAIC,QAAQ,SAArC,UACE,eAACxB,EAAD,CAAmBmB,MAAI,EAACC,GAAI,GAA5B,UACE,cAACjF,EAAA,EAAD,CAAY4B,KAAK,WAAW0D,cAAY,EAAxC,4BAGA,cAACtF,EAAA,EAAD,CAAY4B,KAAK,WAAW0D,cAAY,EAAxC,yCAGA,cAACC,EAAA,EAAD,CAAYL,GAAG,aAAf,qBACA,eAACM,EAAA,EAAD,CACEC,QAAQ,aACRhB,MAAO7E,KAAK8E,MAAMH,SAClBmB,SAAU9F,KAAKyE,iBAHjB,UAKE,cAACsB,EAAA,EAAD,CAAUlB,MAAO,EAAjB,0BACA,cAACkB,EAAA,EAAD,CAAUlB,MAAO,EAAjB,iCACA,cAACkB,EAAA,EAAD,CAAUlB,MAAO,EAAjB,0BACA,cAACkB,EAAA,EAAD,CAAUlB,MAAO,EAAjB,4BAGH7E,KAAKgG,0B,GA5FE9D,IAAM+D,WCzBJC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCVNC,EAAQ,IAERC,IAASC,OAAO,cAAC,EAAD,IAASC,SAASC,eAAe,SD8F3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMpE,MAAK,SAAAqE,GACjCA,EAAaC,kB","file":"static/js/main.9b11ef97.chunk.js","sourcesContent":["const constants = {\n  API: 'https://api.opendota.com',\n};\n\nexport const { API } = constants;\n\nexport default constants;\n","/* eslint-disable */\n// @flow\n\nimport * as React from 'react';\nimport { withStyles } from '@material-ui/core/styles';\nimport { CardActions, CardContent, CardMedia } from '@material-ui/core';\nimport Card from '@material-ui/core/Card';\nimport Typography from '@material-ui/core/Typography';\nimport Divider from '@material-ui/core/Divider';\n\nimport { type Hero } from '../../types';\nimport { API } from '../../constants';\n\ntype Props = {\n  classes: {\n    card: string,\n    media: string,\n    label: string,\n    lastLabel: string,\n  },\n  hero: Hero,\n};\n\ntype TypeLabel = {\n  children: React.Node, isLast: boolean,\n};\n\nconst styles = {\n  card: {\n    maxWidth: 256,\n    margin: 'auto',\n  },\n  media: {\n    height: 144,\n  },\n  label: {\n    margin: '15px 0',\n  },\n  lastLabel: {\n    marginTop: 15,\n  },\n};\n\nclass HeroCard extends React.Component<Props> {\n  renderLabel() {\n    const { classes } = this.props;\n\n    return ({ children, isLast }: TypeLabel) => (\n      <Typography component=\"p\" className={(!isLast && classes.label) || classes.lastLabel}>\n        {children}\n      </Typography>\n    );\n  }\n\n  render() {\n    const { classes, hero } = this.props;\n    const Label = this.renderLabel();\n\n    const imgPath = `${API}${hero.img}`;\n    const name = hero.localized_name;\n    const picks = hero.pro_pick;\n    const win = hero.pro_win;\n    const bans = hero.pro_ban;\n    const winRate = ((win / picks) * 100).toFixed(2);\n    const wilsonScore = (hero.wilsonScore * 100).toFixed(2);\n\n    return (\n      <Card className={classes.card}>\n        <CardMedia\n          className={classes.media}\n          image={imgPath}\n          title={name}\n        />\n        <CardContent>\n          <Typography type=\"headline\" component=\"h2\">\n            {name}\n          </Typography>\n          <Label>Number of Pro Picks: <b>{picks}</b></Label>\n          <Divider />\n          <Label>Pro Win rate <b>{winRate}%</b></Label>\n          <Divider />\n          <Label>Pro Bans <b>{bans}</b></Label>\n          <Divider />\n          <Label isLast>Wilson score: <b>{wilsonScore} / 100</b></Label>\n        </CardContent>\n      </Card>\n    );\n  }\n}\n\nexport default withStyles(styles)(HeroCard);\n","/* eslint-disable */\nimport { API } from './constants';\n\nexport const fetchHeroes = () =>\n  fetch(`${API}/api/heroStats`)\n    .then(response => response.json());\n\nexport default {\n  fetchHeroes,\n};\n","/* eslint-disable */\n// @flow\n\nimport { type Hero } from '../types';\n\n// https://habrahabr.ru/company/darudar/blog/143188/\nconst wilsonScore = (up: number, down: number) => {\n  if (!up) return -down;\n  const n = up + down;\n  const z = 1.64485; // 1.0 = 85%, 1.6 = 95%\n  const phat = up / n;\n  // eslint-disable-next-line\n  return (phat+z*z/(2*n)-z*Math.sqrt((phat*(1-phat)+z*z/(4*n))/n))/(1+z*z/n);\n};\n\nconst byWilsonScore = (a: Hero, b: Hero) => b.wilsonScore - a.wilsonScore;\n\nexport const getTop = (heroes: Array<Hero>, count: number) => {\n  const newHeroes = heroes.filter(hero => hero.pro_win && hero.pro_pick).map(hero => ({\n    ...hero, wilsonScore: wilsonScore(hero.pro_win, hero.pro_pick),\n  }));\n\n  return newHeroes.sort(byWilsonScore).slice(0, count);\n};\n\nexport default {\n  getTop,\n};\n","/* eslint-disable */\nimport React from 'react';\nimport styled from 'styled-components';\nimport Typography from '@material-ui/core/Typography';\nimport CircularProgress from '@material-ui/core/CircularProgress';\nimport MenuItem from '@material-ui/core/MenuItem';\nimport Grid from '@material-ui/core/Grid';\nimport Select from '@material-ui/core/Select';\nimport InputLabel from '@material-ui/core/InputLabel';\nimport HeroCard from '../HeroCard';\nimport { fetchHeroes } from '../../api';\nimport { getTop } from '../utils';\n\nconst Wrapper = styled.div`\n  body:not(&) {\n    margin: 0;\n  }\n\n  padding: 30px;\n`;\n\nconst VerticalSpaceGrid = styled(Grid)`\n  && {\n    margin-bottom: 12px;\n  }\n`;\n\nconst SORT_TYPE = {\n  WilsonScore: 0,\n  NumberOfProPicks: 1,\n  ProWinrate: 2,\n  ProBans: 3,\n};\n\nconst TIME_UPDATE = 1e3 * 60 * 5; // 5 min\n\nclass App extends React.Component {\n  constructor(props, context) {\n    super(props, context);\n\n    this.state = {\n      isLoading: true,\n      heroes: [],\n      sortType: 0,\n    };\n  }\n\n  componentDidMount() {\n    this.handleUpdate();\n    this.timer = setInterval(this.handleUpdate, TIME_UPDATE);\n  }\n\n  componentWillUnmount() {\n    clearInterval(this.timer);\n  }\n\n  handleUpdate = () => {\n    this.setState({\n      isLoading: true,\n    });\n\n    fetchHeroes().then((heroes) => {\n      this.setState({\n        isLoading: false,\n        heroes,\n      });\n    });\n  };\n\n  handleChangeSort = (event) => {\n    this.setState({\n      sortType: event.target.value,\n    });\n  };\n\n  renderHeroList() {\n    const { isLoading, heroes, sortType } = this.state;\n\n    const topHeroes = getTop(heroes, 50).sort((a, b) => {\n      if (sortType === SORT_TYPE.ProBans) {\n        return b.pro_ban - a.pro_ban;\n      }\n\n      if (sortType === SORT_TYPE.ProWinrate) {\n        return (b.pro_win / b.pro_pick) * 100 - (a.pro_win / a.pro_pick) * 100;\n      }\n\n      if (sortType === SORT_TYPE.NumberOfProPicks) {\n        return b.pro_pick - a.pro_pick;\n      }\n\n      return b.wilsonScore - a.wilsonScore;\n    });\n\n    if (isLoading) {\n      return <CircularProgress />;\n    }\n\n    return topHeroes.map(hero => (\n      <Grid item xs={2} key={hero.id}>\n        <HeroCard hero={hero} />\n      </Grid>\n    ));\n  }\n\n  render() {\n    return (\n      <Wrapper>\n        <Grid container spacing={24} justify=\"center\" >\n          <VerticalSpaceGrid item xs={12} >\n            <Typography type=\"display4\" gutterBottom>\n              Top PRO Heroes\n            </Typography>\n            <Typography type=\"display1\" gutterBottom>\n              auto update every 5 minutes\n            </Typography>\n            <InputLabel id=\"label-sort\">Sort by</InputLabel>\n            <Select\n              labelId=\"label-sort\"\n              value={this.state.sortType}\n              onChange={this.handleChangeSort}\n            >\n              <MenuItem value={0}>Wilson score</MenuItem>\n              <MenuItem value={1}>Number of Pro Picks</MenuItem>\n              <MenuItem value={2}>Pro Win rate</MenuItem>\n              <MenuItem value={3}>Pro Bans</MenuItem>\n            </Select>\n          </VerticalSpaceGrid>\n          {this.renderHeroList()}\n        </Grid>\n      </Wrapper>\n    );\n  }\n}\n\nexport default App;\n","/* eslint-disable */\n// In production, we register a service worker to serve assets from local cache.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on the \"N+1\" visit to a page, since previously\n// cached resources are updated in the background.\n\n// To learn more about the benefits of this model, read https://goo.gl/KwvDNy.\n// This link also includes instructions on opting out of this behavior.\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport default function register() {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebookincubator/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (!isLocalhost) {\n        // Is not local host. Just register service worker\n        registerValidSW(swUrl);\n      } else {\n        // This is running on localhost. Lets check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the old content will have been purged and\n              // the fresh content will have been added to the cache.\n              // It's the perfect time to display a \"New content is\n              // available; please refresh.\" message in your web app.\n              console.log('New content is available; please refresh.');\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      if (\n        response.status === 404 ||\n        response.headers.get('content-type').indexOf('javascript') === -1\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","/* eslint-disable react/jsx-filename-extension */\n\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './components/App';\nimport { unregister } from './registerServiceWorker';\n\nrequire('typeface-roboto');\n\nReactDOM.render(<App />, document.getElementById('root'));\nunregister();\n"],"sourceRoot":""}